Primary Code

/*
Code Written by Wesley Heikes and Jacob Crawford

The following Code allows the TIRSLK Max to function as a roomba with a password lock
and speakers.

NOV 6, 2021
 */

//Included Libraries
#include "msp.h"
#include "stdint.h"
#include "stdio.h"
#include <stdbool.h>

//Function Declarations
void SysTick_Init(void);
void bumpSwitch_init(void);
void enableInterupt(void);
void SysTick_Wait(uint32_t delay);
void Clock_Init48MHz(void);
void Motor_Init(void);
void Motor_Stop(void);
void Motor_Forward(uint16_t duty, uint32_t time);
void Motor_Backward(uint16_t duty, uint32_t time);
void Motor_Left(uint16_t duty, uint32_t time);
void Motor_Right(uint16_t duty, uint32_t time);
void timeDelay(uint32_t delay, int number);
void PORT4_IRQHandler(void);

//Global Variables
int flag;
uint16_t duty;
uint32_t time;
bool Locked1 = true;
bool Locked2 = true;
bool Locked3 = true;

//Main Function ----------------------------------------------------------
void main(void)
{

    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD; // stop watchdog timer
    //Initialization function calls
    SysTick_Init();
    Clock_Init48MHz();
    Motor_Init();
    bumpSwitch_init();
    enableInterupt();
    __enable_irq();

    //Local Variables
    duty = 2000;
    time = 500;
    flag = 0;
    uint32_t delay = 48000000;
    int number = 2;


    while(1)
    {
        if(flag == 1)
        {
            Motor_Forward(duty, time);

        }
    }

} //End MAIN -------------------------------------------------------------

//Function Definitions
void PORT4_IRQHandler(void)
{
    uint32_t i =0;

    if(flag == 0)
        {
            switch (P4->IFG & 0xED)
            {
                case 0x01: //First Bump switch
                    Locked1 = false;
                    break;
                case 0x04: //Second Bump switch
                    Locked2 = false;

                    //Test to see if first lock has been removed (fist number entered)
                    if(Locked1 == true)
                    {
                        //Reset all locks
                        Locked1 = true;
                        Locked2 = true;
                        Locked3 = true;
                    }

                    break;
                case 0x08: //Third Bump switch
                    Locked3 = false;

                    //Test to see if first and second lock has been removed (fist and second number entered)
                    if((Locked1 == true)||(Locked2 == true))
                    {
                        //Reset all locks
                        Locked1 = true;
                        Locked2 = true;
                        Locked3 = true;
                    }
                    //If all locks are open blink green and change flag to 1.
                    if((Locked1 == false)&&(Locked2 == false)&&(Locked3 == false))
                    {
                        flag = 1;
                    }
                    break;
                default:
                    Locked1 = true;
                    Locked2 = true;
                    Locked3 = true;
                    break;
            }
            //Delay for switch debounce
            for(i=0;i<750000;i++);

            P4 -> IFG &= 0x00; //Reset the Flags
        }
    if(flag == 1)
    {
            switch (P4->IFG & 0xED)
            {
                case 0x01:
                    Motor_Backward(duty,time/12);
                    Motor_Left(duty,time/2);
                    break;
                case 0x04:
                    Motor_Backward(duty,time/2);
                    Motor_Left(duty,time/9);
                    break;
                case 0x08:
                    Motor_Backward(duty,time/2);
                    Motor_Left(duty,time/6);
                    break;
                case 0x20:
                    Motor_Backward(duty,time/2);
                    Motor_Right(duty,time/6);
                    break;
                case 0x40:
                    Motor_Backward(duty,time/2);
                    Motor_Right(duty,time/9);
                    break;
                case 0x80:
                    Motor_Backward(duty,time/2);
                    Motor_Right(duty,time/12);
                    break;
                default:
                    break;
            }
            //Delay for switch debounce
            for(i=0;i<750000;i++);

            P4 -> IFG &= 0x00; //Reset the Flags
      }

}
void enableInterupt(void)
{
    //ENABLING INTERUPT
    P4 -> IE |= 0xED;
    P4 -> IES |= 0xED;
    P4 -> IFG &= 0x00;
    NVIC -> ISER[1] |= (1<<6);
}
void timeDelay(uint32_t delay, int number)
{
    int t=0;
    for(t=0; t<number; t++){
        SysTick_Wait(delay);
    }
}

void Motor_Stop(void)
{
P5->OUT &= ~0x30;
P3->OUT &= ~0xC0;
P2->OUT &= ~0xC0;
}

void Motor_Forward(uint16_t duty, uint32_t time)
{
    P5->OUT &= 0x30;
    P3->OUT |= 0xC0;

    int i=0;

    for(i=0; i<time; i++){
        P2->OUT |= 0xC0;
        SysTick_Wait(48*duty);
        P2->OUT &= ~0xC0;
        SysTick_Wait(48*(10000-duty));
    }
    Motor_Stop();
}

void Motor_Backward(uint16_t duty, uint32_t time)
{
    P5->OUT |= 0x30;
    P3->OUT |= 0xC0;

    int i=0;

    for(i=0; i<time; i++){
        P2->OUT |= 0xC0;
        SysTick_Wait(48*duty);
        P2->OUT &= ~0xC0;
        SysTick_Wait(48*(10000-duty));
    }
    Motor_Stop();
}

void Motor_Left(uint16_t duty, uint32_t time)
{
    int i;
    P3-> OUT |=0xC0;
    P5->OUT &=~0x20;
    P5->OUT |=0x10;

    for(i=0;i<time;i++){
        P2-> OUT |=0xC0;
        SysTick_Wait(48*duty); //changed 48 to 10
        P2->OUT &=~0xC0;
        SysTick_Wait(48*(10000-duty));
    }
    Motor_Stop();

}

void Motor_Right(uint16_t duty, uint32_t time)
{
    int i;
    P3-> OUT |=0xC0;
    P5->OUT &=~0x10;
    P5->OUT |=0x20;

    for(i=0;i<time;i++){
        P2-> OUT |=0xC0;
        SysTick_Wait(48*duty);//changed 48 to 10
        P2->OUT &=~0xC0;
        SysTick_Wait(48*(10000-duty));
    }
    Motor_Stop();

}

void Motor_Init(void)
{
    P5->SEL0 &= ~0x30;
    P5->SEL1 &= ~0x30;
    P5-> DIR |= 0x30;
    P5-> OUT &= ~0x30;
    P3->SEL0 &= ~0xC0;
    P3->SEL1 &= ~0xC0;
    P3-> DIR |= 0xC0;
    P3-> OUT &= ~0xC0;
    P2->SEL0 &= ~0xC0;
    P2->SEL1 &= ~0xC0;
    P2-> DIR |= 0xC0;
    P2-> OUT &= ~0xC0;

}

void SysTick_Init(void)
{
    //Initialization of SysTick Timer;
    SysTick -> CTRL =0;
    SysTick -> LOAD =0x00FFFFFF;
    SysTick -> CTRL =0x00000005;
}

void SysTick_Wait(uint32_t delay)
{
    SysTick -> LOAD = delay-1;
    SysTick -> VAL = 0;
    while((SysTick ->CTRL & 0x00010000) ==0) {};
}

void bumpSwitch_init(void)
{
    P4 ->SEL0 &= ~0xED;
    P4 ->SEL0 &= ~0xED;
    P4 ->DIR &= ~0xED;
    P4 ->REN |= 0xED;
    P4 ->OUT |= 0xED;
}
